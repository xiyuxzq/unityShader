Shader "GameShaders/BallerWithShadow"
{
	Properties
	{
		_MainTex ("Texture", 2D) = "white" {}
		_Outline("Outline", range(0,0.1)) = 0.02
		_Factor ("Factor", range(0,1)) = 0.1
		_ToonEffect("Toon Effect", range(0,1)) = 0.5	//卡通化程度
		_Steps("Steps of toon",range(0,9)) = 3			//色阶层数
		_ShadowHeight("shadow height", range(0,0.2)) = 0.05	//阴影高度
		_ShadowAlpha("shadow alpha", range(0,1)) = 0.5	//阴影alpha
		_BlendColor("Blend Color", Color) = (1,1,1,1)
		_LightAmount("Light Amount", Float) = 1
	}
	SubShader
	{				
		//影子
		Pass
		{
			Tags{  "RenderType" = "Opaque"  "IgnoreProjector" = "True" "LightMode" = "Always" }
			Blend SrcAlpha OneMinusSrcAlpha
			Stencil {
				Ref 0
				Comp Equal
				Pass IncrSat
				ZFail Keep
			}
			CGPROGRAM
			
			#pragma vertex vert
			#pragma fragment frag
			#include "UnityCG.cginc"
			// float4x4 _World2Ground;
			// float4x4 _Ground2World;
			struct v2f {
				float4 pos:SV_POSITION;
			};
			float _ShadowHeight;
			v2f vert(float4 vertex:POSITION)
			{
				float3 litDir;
				litDir = WorldSpaceLightDir(vertex);//世界空间主光照相对于当前物体的方向
				//litDir = mul(_World2Ground,float4(litDir,0)).xyz;//光源方向转换到接受阴影的平面空间
				litDir = normalize(litDir);	// 归一
				float4 vt;
				vt = mul(_Object2World,vertex); //将当前物体转换到世界空间
//				vt = mul(_World2Ground,vt);		// 将物体在世界空间的矩阵转换到地面空间
				vt.xz = vt.xz - (vt.y / litDir.y)*litDir.xz;// 用三角形相似计算沿光源方向投射后的XZ
				vt.y = _ShadowHeight;// 使阴影保持在接受平面上
//				vt = mul(_Ground2World, vt); // 阴影顶点矩阵返回到世界空间
				vt = mul(_World2Object, vt); // 返回到物体的坐标
				v2f o;
				o.pos = mul(UNITY_MATRIX_MVP, vt);//输出到裁剪空间
				return o;
			}

			float _ShadowAlpha;
			float4 frag(v2f i) :COLOR
			{
				//return smoothstep(0,1,i.atten / 2);
				return float4(0,0,0,_ShadowAlpha);
			}

			ENDCG
		}
		
		//描边
		Pass
		{
			Tags{ "RenderType" = "Opaque"  "IgnoreProjector" = "True" "LightMode" = "Always" }
			//Cull Front
			ZWrite Off
			CGPROGRAM
			#pragma vertex vert
			#pragma fragment frag
			
			#include "UnityCG.cginc"

			struct appdata
			{
				float4 vertex : POSITION;
				float4 normal : NORMAL;
			};

			struct v2f
			{
				float4 vertex : SV_POSITION;
				float4 color : Color;
			};

			sampler2D _MainTex;
			float4 _MainTex_ST;
			float _Outline;
			float _Factor;			
			
			v2f vert (appdata v)
			{
				v2f o;
				
				float3 dir = normalize(v.vertex.xyz);				
				float3 dir2 = v.normal;
				float D = dot(dir,dir2); //反夹角				
				dir = dir*sign(D);
				dir = dir*_Factor + dir2*(1 - _Factor);
				
				v.vertex.xyz += dir*_Outline;				
				o.vertex = mul(UNITY_MATRIX_MVP, v.vertex);		
				o.color = float4(_Outline, _Outline, _Outline, _Outline);
				return o;
			}
			
			fixed4 frag (v2f i) : SV_Target
			{
				return 0;
			}
			ENDCG
		}
				
		//卡通画角色
		Pass
		{
			Tags{ "RenderType" = "Opaque" "LightMode" = "ForwardBase" }
			CGPROGRAM
			#pragma vertex vert
			#pragma fragment frag

			#include "UnityCG.cginc"

			struct appdata
			{
				float4 vertex : POSITION;
				float4 normal : NORMAL;
				float2 uv : TEXCOORD0;
			};

			struct v2f
			{
				float2 uv : TEXCOORD0;
				float4 vertex : SV_POSITION;
				float3 normal: TEXCOORD1;
				float3 lightdir:TEXCOORD2;
			};

			sampler2D _MainTex;
			float4 _MainTex_ST;
			float4 _LightColor0;
			fixed4 _BlendColor;
			float _ToonEffect;
			float _Steps;
			uniform half _LightAmount;	//_LightAmount==0, 不取环境光
				
			v2f vert(appdata v)
			{
				v2f o;
				o.vertex = mul(UNITY_MATRIX_MVP, v.vertex);
				o.uv = TRANSFORM_TEX(v.uv, _MainTex);
				o.normal = normalize(v.normal);
				o.lightdir = ObjSpaceLightDir(v.vertex);
				o.lightdir = normalize(o.lightdir);
				return o;
			}

			fixed4 frag(v2f i) : SV_Target
			{				
				fixed4 col = tex2D(_MainTex, i.uv);	
				float diff = max(0, dot(i.normal, i.lightdir));
				diff = (diff+1) / 2;						//half lambert, 使低亮度的地方加强
				diff = smoothstep(0,1,diff);				//使颜色平滑在[0, 1]
				float toon = round(diff*_Steps)/_Steps;		//简化颜色
				diff = lerp(diff, toon, _ToonEffect);		//调节卡通程度
				fixed4 outcolor;
				if(_LightAmount > 0){
					outcolor = col * _LightColor0 * diff;				
				} else {
					outcolor = col * diff;				
				}
				return outcolor * _BlendColor;				
			}
			ENDCG
		}
		
	}
	FallBack "VertexLit"
}
