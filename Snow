Shader "Custom/normal_snow" {
	Properties {
		_Color ("Color", Color) = (1,1,1,1)
		_MainTex ("Albedo (RGB)", 2D) = "white" {}
		_Glossiness ("Smoothness", Range(0,1)) = 0.5
		_Metallic ("Metallic", Range(0,1)) = 0.0
		_Bump("Normal",2D) = "bump"{}
		_SnowColor("SnowColor",color) = (1,1,1,1)
		_SnowLevel("SnowLevel",range(0,0.5)) = 0.2
		_SnowDirection("SnowDiretion",vector) = (0,1,0,1)
		_SnowDepth("SnowDepth",range(0,1)) = 0.5
		//_SecondTexture("sectex",2D) = ""{}
		_Wetness("Wetness",range(0,1)) = 0.1
		
	}
	SubShader {
		Tags { "RenderType"="Opaque" }
		LOD 200
		
		CGPROGRAM
		// Physically based Standard lighting model, and enable shadows on all light types
		#pragma surface surf Standard fullforwardshadows vertex:vert

		// Use shader model 3.0 target, to get nicer looking lighting
		#pragma target 3.0

		sampler2D _MainTex;
		half _Glossiness;
		half _Metallic;
		fixed4 _Color;
		sampler2D _Bump;
		fixed4 _SnowColor;
		half _SnowLevel;
		float4 _SnowDirection;
		half _SnowDepth;
		//sampler2D _SecondTexture;
		half _Wetness;

		struct Input {
			float2 uv_MainTex;
			float2 uv_Bump;
			float2 uv_SecondTexture;
			float3 worldNormal;
			INTERNAL_DATA
		};

		

		void surf (Input IN, inout SurfaceOutputStandard o) {
			// Albedo comes from a texture tinted by color
			fixed4 c = tex2D (_MainTex, IN.uv_MainTex) * _Color;
			//fixed4 d = tex2D(_SecondTexture,IN.uv_SecondTexture);
			o.Normal = UnpackNormal(tex2D(_Bump,IN.uv_Bump));
			float difference = dot(WorldNormalVector(IN,o.Normal),_SnowDirection.xyz) - lerp(1,-1,_SnowLevel);
			difference = saturate (difference/_Wetness);
			o.Albedo = difference *_SnowColor.rgb+(1-difference)*c.rgb;
			o.Metallic = _Metallic;
			o.Smoothness = _Glossiness;
			o.Alpha = c.a;
		}
		
		void vert(inout appdata_full v)
		{
			if(dot(v.normal,_SnowDirection.xyz)>= lerp(1,-1,((1-_Wetness)*_SnowLevel*2)/3))
				{
					v.vertex.xyz += (_SnowDirection.xyz + v.normal) * _SnowDepth * _SnowLevel;
				}
		}
		ENDCG
	} 
	FallBack "Diffuse"
}
