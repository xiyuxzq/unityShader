可以采用内置的Mobile下面的shader是最好

1.复杂的数学函数（如 pow，exp，log，cos，sin，tan 等等）会大大增加 GPU 负担，所以一个好的经验法则是，此类运算在每个像素中不得超过一个。考虑在合适时使用查找纹理作为替代选择。

2.alpha 测试运算会让片段速度变慢。（on PowerVR GPUs found in iOS and some Android devices）

3.编写自定义的着色器时，应始终指定浮点变量精度。为获得最佳性能，挑选精度尽可能小的浮点格式至关重要。很多台式机 GPU 均完全忽略运算精确，但是它对于大量移动 GPU 的性能具有重大影响。

如果着色器使用 Cg/HLSL 编写，那么精度规定如下：

float — 完整的 32 位浮点格式，适合用于顶点变换，但性能最慢。
half — 简化的 16 位浮点格式，适用于纹理 UV 坐标且比 float 大约快两倍。
fixed — 10位定点格式，适合色彩、照明计算和其它高性能操作，速度大约比 float 快 4 倍
如果着色器以 GLSL ES 编写，那么浮点精度将分别规定为 highp、mediump、lowp。

4.大部分shader都有_Color属性，但如果你并没有使用，那么就应该去掉，避免无谓的计算。
5.通用的表面着色器虽然通用，但性能其实并不好

[NoScaleOffset]  用来隐藏贴图印射的缩放和偏移计算，代码依然可以操作

ForceNoShadowCasting   true表示不受其它物体投掷阴影影响    false表示受别物体投掷阴影影响

#pragma multi_compile __R
#pragma multi_compile __G
#pragma multi_compile __B

消耗十分大的一种写法，它将生成所有组合类的变体，就是2*2*2种，这极大的增加了负担。

#pragma shader_featre __R
#pragma shader_featre __G
#pragma shader_featre __B

通常只生成自己，但是实际上容易不生成变体
